name: Solar System Workflow

on: 
  workflow_dispatch: 
  push:
    branches: 
      - main
      - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        
        strategy:
            matrix:
                nodejs_version: [18, 20]
                os: [ubuntu-latest]
                exclude:
                  - nodejs_version: 18
                    os: macos-latest
        runs-on: ${{ matrix.os }}
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
            uses: actions/setup-node@v3
            with:
              node-version: ${{ matrix.nodejs_version }}

          - name: Cache NPM dependencies
            uses: actions/cache@v3
            with:
              path: node_modules
              key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

          - name: Install Dependencies
            run: npm install

          - name: Unit Testing
            id: nodejs-unit-testing-step
            run: npm test

          - name: Archive Test Result
            if: always()
            uses: actions/upload-artifact@v4
            with:
              name: Mocha-Test-Result-${{ matrix.os }}-node-${{ matrix.nodejs_version }}
              path: test-results.xml

    code-coverage:
        name: Code Coverage
        container: 
          image: node:18

        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
              --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          # - name: Setup NodeJS Version - 18
          #   uses: actions/setup-node@v3
          #   with:
          #     node-version: 18

          - name: Cache NPM dependencies
            uses: actions/cache@v3
            with:
              path: node_modules
              key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}    

          - name: Install Dependencies
            run: npm install

          - name: Check Code Coverage
            continue-on-error: true
            run: npm run coverage

          - name: Archive Test Result
            uses: actions/upload-artifact@v4
            with:
              name: Code-Coverage-Result
              path: coverage
              retention-days: 5

    reports-s3:
      needs: [code-coverage, unit-testing]
      name: AWS S3 - Upload Reports
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - name: Download Mocha Test Artifact
          uses: actions/download-artifact@v4
          with:
            name: Mocha-Test-Result-${{ matrix.os }}-node-${{ matrix.nodejs_version }}

        - name: Download Code Coverage Artifact
          uses: actions/download-artifact@v4
          with:
            name: Code-Coverage-Result

        - name: Merge Test Files
          run: |
             ls -ltr
             mkdir reports-${{ github.sha }}
             mv cobertura-coverage.xml reports-${{ github.sha }}/
             mv test-results.xml reports-${{ github.sha }}/
             ls -ltr reports-${{ github.sha }}/

        - name: Upload to AWS S3
          run: echo "uploading....."

    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions: 
          packages: write
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repo
            uses: actions/checkout@v4

          - name: Dockerhub Login
            uses: docker/login-action@v2.2.0
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_PASSWORD }}

          - name: GHCR Login
            uses: docker/login-action@v2.2.0
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - name: Docker Build for Testing
            uses: docker/build-push-action@v6
            with:
              context: .
              push: false
              tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          - name: Docker Image Testing
            run: |
              docker images
              docker run --name solar-system-app -d \
                  -p 3000:3000 \
                  -e MONGO_URI=$MONGO_URI \
                  -e MONGO_USERNAME=$MONGO_USERNAME \
                  -e MONGO_PASSWORD=$MONGO_PASSWORD \
                  ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              export IP=$(docker inspect -f '{{range .NetworkSettings}}{{.IPAddress}}{{end}}' solar-system-app)
              echo $IP

              echo Testing Image URL using wget
              wget -q -O - 127.0.0.1:3000/live | grep live

          - name: Container Registry Push
            uses: docker/build-push-action@v6
            with:
              context: .
              push: true
              tags: |
                  ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                  ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets: 
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/development/

    dev-integration-testing: 
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          continue-on-error: true
          env:
            URL: ${{ needs.dev-deploy.outputs.application-url }}
          run: |
             echo $URL
             echo "---------------"
             curl hhtps://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets: 
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: production
        k8s-manifest-dir: kubernetes/production/

    prod-integration-testing: 
      name: Prod Integration Testing
      if: github.ref == 'refs/heads/main'
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          continue-on-error: true
          env:
            URL: ${{ needs.prod-deploy.outputs.application-url }}
          run: |
             echo $URL
             echo "---------------"
             curl hhtps://$URL/live -s -k | jq -r .status | grep -i live
             